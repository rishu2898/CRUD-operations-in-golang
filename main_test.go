package main

import (
	"fmt"
	"github.com/gorilla/mux"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestReturnSingleEmployee(t *testing.T) {
	cases := []struct {
		id         string
		expected   string
		statusCode int
	} {
		{"1", "[{\"id\":1,\"name\":\"rk\",\"age\":22,\"gender\":\"M\",\"role\":2}]\n", http.StatusOK},
		{"-1","204 not found",http.StatusOK},
	}
	// function to connect the database
	ConnectDB()
	for _, c := range cases {
		req, err := http.NewRequest("GET", fmt.Sprintf("/employee/%v", c.id), nil)
		if err != nil {
			t.Fatal(err)
		}

		req = mux.SetURLVars(req, map[string]string {
			"id": c.id,
		})
		// returns an initialized ResponseRecorder
		w := httptest.NewRecorder()
		returnSingleEmployee(w, req)

		//Result returns the response generated by the handler.
		//The returned Response will have at least its StatusCode, Header, Body, and optionally Trailer populated.
		data := w.Result()
		resByte, error := ioutil.ReadAll(data.Body)
		if error != nil {
			t.Fatal(err)
		}
		if string(resByte) != c.expected {
			t.Fatalf("get: %v expected: %v", string(resByte), c.expected)
			return
		}
		if w.Code != c.statusCode {
			t.Fatalf("get: %v expected: %v", w.Code, c.statusCode)
		}
	}
}
